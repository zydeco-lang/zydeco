// # Chapter 8: Lense, Prism and Optics

// The following code is only a sketch of the idea.

alias Lens (S : VType) (A : VType) : CType =
  forall (Fun : VType -> CType) . Thunk (A -> Fun A) -> (S -> Fun S)
end

codata Identity (A : VType) where
| .identity : Ret A
end

codata Const (A : VType) (B : VType) where
| .const: Ret A
end

def ! over (S : VType) (A : VType) (lens : Thunk (Lens S A)) (f : Thunk (A -> Ret A)) (s : S) : Ret S =
  (! lens Identity { fn a -> fn .identity -> ! f a } s) .identity
end

def ! view (S : VType) (A : VType) (lens : Thunk (Lens S A)) (s : S) : Ret A =
  (! lens (Const A) { fn a -> fn .const -> ret a } s) .const
end

main
  ! exit 0
end

// To be continued...
