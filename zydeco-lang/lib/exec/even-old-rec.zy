main
  let rec odd: Nat -> Ret(Bool) =
    let even = {
      rec (even: Thunk(Nat -> Ret(Bool))) -> (
        fn (x: Nat) -> (
          match x
          | +Z() -> ret +True()
          | +S(x) -> !odd x
          end
        )
      )
    } in
    fn (x: Nat) -> (
      match x
      | +Z() -> ret +False()
      | +S(x) -> !even x
      end
    )
  in
  do b <- !odd +S(+S(+S(+Z())));
  match b
  | +True() -> ! exit 0
  | +False() -> ! exit 1
  end
end
