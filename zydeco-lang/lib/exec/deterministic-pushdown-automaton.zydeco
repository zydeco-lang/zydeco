data Tok where
  | +LParen()
  | +RParen()
end

data LList' (A : VType) where
  | +Nil()
  | +Cons(A, Thunk(Ret(LList' A)))
end

data ParenCounterState where
  | +Ok()
  | +Reject()
end

codata ParenCounterStk where
  | .none : Ret Bool
  | .some : ParenCounterStk
end

alias ParenCounterTrans = ParenCounterState -> ParenCounterStk end

def rec fn foldr
  (ll : Thunk(Ret(LList' Tok)))
  (step : Thunk(Tok -> Thunk(ParenCounterTrans) -> ParenCounterTrans))
  (final : Thunk(ParenCounterTrans))
  : ParenCounterTrans =
  do l <- ! ll;
  match l
  | +Nil()      -> ! final
  | +Cons(c, k) -> ! step c { ! foldr k step final }
  end
end

def rec reject : ParenCounterStk =
  comatch
  | .none -> ret false
  | .some -> ! reject
  end
end
  
def try_accept : Thunk(ParenCounterStk) = {
  comatch
  | .none -> ret true
  | .some -> ! reject
  end
} end

def fn accept_or_not (s : ParenCounterState) : ParenCounterStk =
  match s
  | +Ok()     -> ! try_accept
  | +Reject() -> ! reject
  end
end

def fn paren_counter_step (c : Tok) (k : Thunk(ParenCounterTrans)) (state : ParenCounterState) : ParenCounterStk =
  match c
  | +LParen() -> ! k state .some
  | +RParen() ->
  (comatch
  | .none -> ! k (+Reject() : ParenCounterState) .none # Note: would be more efficient to just ! reject here
  | .some -> ! k state
  end)
  end
end

def fn demonstrate (s: String) (expect: Bool) (toks: Thunk(Ret(LList' Tok))) (t : Thunk(OS)) : OS =
  do s' <- ! str_append "The following parens are balanced? "  s;
  do b <- ! foldr toks paren_counter_step accept_or_not (+Ok() : ParenCounterState) .none;
  do pass <- ! bool_eq expect b;
  match pass
  | +True() -> (
    do s <- ! bool_to_str b;
    ! write_line s' { ! write_line s t })
  | +False() -> (
  ! write_line "WRONG ANSWER" { ! exit 1 })
  end
end

main
  ! demonstrate "(())" true {ret +Cons(+LParen(), {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Cons(+RParen(), {ret +Nil()})})})})} {
  ! demonstrate "()()" true {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Nil()})})})})} {
  ! demonstrate ")(()" false {ret +Cons(+RParen(), {ret +Cons(+LParen(), {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Nil()})})})})} {
  ! demonstrate "()(" false {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Cons(+LParen(), {ret +Nil()})})})} {
  ! demonstrate "()" true {ret +Cons(+LParen(), {ret +Cons(+RParen(), {ret +Nil()})})} {
  ! demonstrate "(" false {ret +Cons(+LParen(), {ret +Nil()})} {
  ! demonstrate ")" false {ret +Cons(+RParen(), {ret +Nil()})} {
  ! demonstrate ""  true {ret +Nil()} {
  ! exit 0 }}}}}}}}
end
