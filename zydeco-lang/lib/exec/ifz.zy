main
  let zero: Nat = +Z() in
  let fn suc (x: Nat): F Nat =
    ret (+S(x) : Nat)
  in
  let fn ifz (z: Bool) (pred: U (Nat -> Ret Bool)) (x: Nat): Ret Bool =
    match x
    | +Z() -> ret z
    | +S(x) -> !pred x
    end
  in
  do one <- !suc zero;
  do two <- !suc one;
  let fn ifz (x: Nat): F Bool =
    !ifz false { fn (_: Nat) -> ret true } x
  in
  do two' <- !ifz two;
  do one' <- !ifz one;
  do zero' <- !ifz zero;
  do b <- (
    match two'
    | +True() -> (
      match one'
      | +True() -> (
        match zero'
        | +False() -> ret true
        | +True() -> ret false
        end
      )
      | +False() -> ret false
      end
    )
    | +False() -> ret false
    end
  );
  match b
  | +True() -> ! exit 0
  | +False() -> ! exit 1
  end
end
