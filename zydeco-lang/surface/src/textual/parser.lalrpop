use crate::textual::{
    syntax::*, lexer::*, escape,
};

grammar<'input, 'arena>(
    input: &'input str,
    loc: &'input LocationCtx,
    parser: &'arena mut Parser,
);

//* --------------------------------- Tokens --------------------------------- */

extern {
    type Location = usize;
    
    enum Tok<'input> {
        "UpperId" => Tok::UpperIdent(<&'input str>),
        "LowerId" => Tok::LowerIdent(<&'input str>),
        "CtorId" => Tok::CtorIdent(<&'input str>),
        "DtorId" => Tok::DtorIdent(<&'input str>),

        "where" => Tok::Where,
        "end" => Tok::End,
        "pub" => Tok::Public,
        "module" => Tok::Module,
        "layer" => Tok::Layer,
        "root" => Tok::Root,
        "use" => Tok::Use,
        "data" => Tok::Data,
        "codata" => Tok::Codata,
        "alias" => Tok::Alias,
        "define" => Tok::Define,
        "extern" => Tok::Extern,
        "main" => Tok::Main,
        "let" => Tok::Let,
        "in" => Tok::In,
        "do" => Tok::Do,
        "ret" => Tok::Ret,
        "fn" => Tok::Fn,
        "pi" => Tok::Pi,
        "rec" => Tok::Rec,
        "match" => Tok::Match,
        "comatch" => Tok::Comatch,
        "forall" => Tok::Forall,
        "exists" => Tok::Exists,
        "sigma" => Tok::Sigma,
        "@" => Tok::At,
        "pack" => Tok::Pack,

        "IntLit" => Tok::IntLit(<&'input str>),
        "StrLit" => Tok::StrLit(<&'input str>),
        "CharLit" => Tok::CharLit(<&'input str>),

        "(" => Tok::ParenOpen,
        ")" => Tok::ParenClose,
        "[" => Tok::BracketOpen,
        "]" => Tok::BracketClose,
        "{" => Tok::BraceOpen,
        "}" => Tok::BraceClose,
        "," => Tok::Comma,
        ":" => Tok::Colon,
        "::" => Tok::ColonColon,
        "=" => Tok::Equals,
        ";" => Tok::Semicolon,
        "!" => Tok::Force,
        "/" => Tok::Slash,
        "|" => Tok::Branch,
        "+" => Tok::Plus,
        "*" => Tok::Star,
        "." => Tok::Dot,
        ".." => Tok::DotDot,
        "->" => Tok::Arrow,
        "<-" => Tok::Assign,
        "_" => Tok::Hole,
    }
}

//* -------------------------------- Utilities ------------------------------- */

#[inline]
Sp<T>: Sp<T> = <l:@L> <inner:T> <r:@R> => Sp {
    info: Span::new(l, r).under_loc_ctx(loc), inner,
};

// #[inline]
SepByDelim<Start, Sep, T, End>: Vec<T> = {
    Start <mut v: (<T> Sep)*> <last: T?> End => {
        match last {
            None => { },
            Some(t) => { v.push(t); }
        };
        v
    }
};

//* -------------------------------- Terminals ------------------------------- */

Int: i64 = <"IntLit"> => <>.parse().unwrap();
String: String = <"StrLit"> => {
    escape::apply_string_escapes(&<>[1..(<>).len()-1])
};
Char: char = <"CharLit"> => escape::apply_char_escapes(<>);

Literal: Literal = {
    <Int> => <>.into(),
    <String> => <>.into(),
    <Char> => <>.into(),
};

//* ------------------------------- Identifiers ------------------------------ */

#[inline]
MixedId: String = { <"UpperId"> => <>.into(), <"LowerId"> => <>.into(), };

#[inline]
VarName: VarName = <MixedId> => VarName(<>);
CtorName: CtorName = {
    <"CtorId"> => CtorName(<>.into()),
    "pack" => CtorName(String::from("pack")),
};
DtorName: DtorName = {
    <"DtorId"> => DtorName(<>.into()),
    "@" => DtorName(String::from("@")),
};

NameDef<T>: NameDef<T> = <T> => NameDef(<>);
PathSeg: VarName = {
    <VarName> => <>.into(),
    // ".." => VarName(String::from("..")),
};
NameRef<T>: NameRef<T> = {
    <root:("root" "/")?> <path:(<VarName> "/")*> <inner:T> => {
        NameRef(root.is_some(), path, inner)
    },
};

DefId: DefId = <NameDef<Sp<VarName>>> => parser.def(<>.0);

//* ----------------------------------- Use ---------------------------------- */

UsePath: UsePath = <NameRef<UseEnum>> => UsePath(<>);
UseEnum: UseEnum = {
    <VarName> => <>.into(),
    <binder:VarName> "=" <origin:VarName> => UseAlias(binder, origin).into(),
    "*" => UseAll.into(),
    <Uses> => <>.into(),
};
Uses: Uses = <SepByDelim<"(", ",", <UsePath>, ")">> => Uses(<>);

//* ------------------------------- Structural ------------------------------- */

Paren<T>: Paren<T> = SepByDelim<"(", ",", <T>, ")"> => Paren(<>);
App<T>: App<T> = <T*> => App(<>);
Ann<Tm, Ty>: Ann<Tm, Ty> = <tm:Tm> ":" <ty:Ty> => {
    Ann { tm, ty, }
};
Hole: Hole = "_" => Hole;

//* --------------------------------- Pattern -------------------------------- */

#[inline]
PatternGen<P>: PatId = <Sp<P>> => parser.pat(<>);

#[inline]
PatternId: PatId = <PatternGen<Pattern>>;
Pattern: Pattern = {
    "(" <Ann<PatternId, TermId>> ")" => <>.into(),
    <Hole> => <>.into(),
    <DefId> => <>.into(),
    <ctor:CtorName> <pat:PatternId> => {
        Ctor(ctor, pat).into()
    },
    <Paren<PatternId>> => <>.into(),
};

#[inline]
CoPatternGen<P>: CoPatId = <Sp<P>> => parser.copat(<>);

#[inline]
CoPatternId: CoPatId = <CoPatternGen<CoPattern>>;
CoPattern: CoPattern = {
    <CoPatternAtom>,
    <x:CoPatternId> <y:CoPatternAtomId> => {
        App(vec![x, y]).into()
    },
    // <CoPatternAtomId*> => App(c).into(),
};

#[inline]
CoPatternAtomId: CoPatId = <CoPatternGen<CoPatternAtom>>;
CoPatternAtom: CoPattern = {
    <PatternId> => <>.into(),
    <DtorName> => {
        <>.into()
    },
};

//* ---------------------------------- Term ---------------------------------- */

CompModifier: () = { "!", "fn" };

GenBind<T>: GenBind<T> = {
    <rec:"rec"?> <comp:CompModifier?> <binder:PatternId> <params:CoPatternId?>
    <ty:(":" <TermId>)?> <bindee:T> => GenBind {
        rec: rec.is_some(),
        comp: comp.is_some(),
        binder, params, ty, bindee,
    }
};
GenBindTerm: GenBind<TermId> = GenBind<("=" <TermId>)>;
GenBindNull: GenBind<()> = GenBind<()>;

Data: Data = <DataArm*> => Data { arms: <> };
#[inline]
DataArm: DataArm = {
    "|" <name:CtorName> <param:TermId> => {
        DataArm { name, param }
    },
};
CoData: CoData = <CoDataArm*> => CoData { arms: <> };
#[inline]
CoDataArm: CoDataArm = {
    "|" <name:DtorName> <params:CoPatternId?> ":" <out: TermId> => {
        CoDataArm { name, params, out }
    },
};

Matcher: Matcher = {
    "|" <binder:PatternId> "->" <tail:TermId> => Matcher {
        binder, tail
    },
};
CoMatcher: CoMatcher = {
    "|" <params:CoPatternId> "->" <tail:TermId> => CoMatcher {
        params, tail
    },
};

#[inline]
TermGen<T>: TermId = <Sp<T>> => parser.term(<>);

#[inline]
TermId: TermId = <TermGen<Term>>;
Term: Term = {
    <TermRight>,
    // abstraction
    "fn" <params:CoPatternId> "->" <term:TermId> => {
        Abs(params, term)
    }.into(),
    // pi
    "pi" <params:CoPatternId> "." <term:TermId> => {
        Pi(params, term)
    }.into(),
    // forall
    "forall" <params:CoPatternId> "." <ty:TermRightId> => {
        Forall(params, ty)
    }.into(),
    // sigma
    "sigma" <params:CoPatternId> "." <ty:TermRightId> => {
        Sigma(params, ty)
    }.into(),
    // exists
    "exists" <params:CoPatternId> "." <ty:TermRightId> => {
        Exists(params, ty)
    }.into(),
    // recursion
    "rec" <binder:PatternId> "->" <term:TermId> => {
        Rec(binder, term)
    }.into(),
    // bind
    "do" <binder:PatternId> "<-" <bindee:TermId> ";" <tail:TermId> => {
        Bind { binder, bindee, tail }.into()
    },
    // pure bind
    "let" <binding:GenBindTerm> "in" <tail:TermId> => PureBind {
        binding, tail
    }.into(),
    // // use bind
    // "use" <uses:UsePath> "in" <tail:TermId> => UseBind {
    //     uses, tail
    // }.into(),
    "data" <Data> "end" => <>.into(),
    "codata" <CoData> "end" => <>.into(),
    // match
    "match" <scrut:TermId> <arms:(<Matcher>)*> "end" => Match {
        scrut, arms
    }.into(),
    "comatch" <arms:(<CoMatcher>)*> "end" => CoMatch {
        arms
    }.into(),
};

#[inline]
TermAnnId: TermId = <TermGen<TermAnn>>;
TermAnn: Term = {
    <Term>,
    <Ann<TermId, TermId>> => <>.into(),
};

#[inline]
TermParenId: TermId = <TermGen<TermParen>>;
TermParen: Term = <Paren<TermAnnId>> => <>.into();

#[inline]
TermRightId: TermId = <TermGen<TermRight>>;
TermRight: Term = {
    <TermLeft>,
    // arrow
    <ty_in:TermLeftId> "->" <ty_out:TermRightId> => {
        Arrow(ty_in, ty_out).into()
    },
};

#[inline]
TermLeftId: TermId = <TermGen<TermLeft>>;
TermLeft: Term = {
    <TermApp>,
    // product
    <ty_in:TermLeftId> "*" <ty_out:TermAppId> => {
        Prod(vec![ty_in, ty_out]).into()
    },
};

#[inline]
TermAppId: TermId = <TermGen<TermApp>>;
TermApp: Term = {
    <TermAtom>,
    // application
    <term:TermAppId> <arg:TermAtomId> => {
        App(vec![term, arg]).into()
    },
    // destructor
    <term:TermAppId> <name:DtorName> => {
        Dtor(term, name).into()
    },
};

#[inline]
TermAtomId: TermId = <TermGen<TermAtom>>;
TermAtom: Term = {
    // parentheses
    <TermParen>,
    <Hole> => <>.into(),
    <NameRef<VarName>> => <>.into(),
    "{" <TermId> "}" => Thunk(<>).into(),
    "!" <TermAtomId> => Force(<>).into(),
    "ret" <TermAtomId> => Return(<>).into(),
    // constructor
    <name:CtorName> <args:TermAtomId> => {
        Ctor(name, args).into()
    },
    <Literal> => <>.into(),
};

pub SingleTerm: TermId = TermId;

//* -------------------------------- TopLevel -------------------------------- */

DataDef: DataDef = {
    "data" <name:DefId> <params:PatternId*>
        <def:("where" <Data>)>
    "end" => DataDef {
        name, params, def,
    }
};

CoDataDef: CoDataDef = {
    "codata" <name:DefId> <params:PatternId*>
        <def:("where" <CoData>)>
    "end" => CoDataDef {
        name, params, def,
    }
};

// UseLayer: Modifiers<UsePath> = {
//     <Modifiers<("use" <UsePath>)>> => <>.into(),
// };

Declaration: Declaration = {
    <DataDef> => <>.into(),
    <CoDataDef> => <>.into(),
    "define" <GenBindTerm> "end" => Define(<>).into(),
    "alias" <GenBindTerm> "end" => Alias(<>).into(),
    "extern" <GenBindNull> "end" => Extern(<>).into(),
    // "layer" <name:(<NameRef<VarName>>)?>
    //     <uses:(<UseLayer>)*>
    // <top:("where" <TopLevel>)> "end" => Layer {
    //     name, uses, top
    // }.into(),
    // "use" <UsePath> "end" => UseDef(<>).into(),
    // "use" <uses:UsePath> "where" <top:TopLevel> "end" => UseBlock {
    //     uses, top
    // }.into(),
    "main" <TermId> "end" => Main(<>).into(),
};

Modifiers<T>: Modifiers<T> = {
    <public:"pub"?> <inner:T> => Modifiers {
        public: public.is_some(),
        inner,
    },
};

pub ReplInput: ReplInput = {
    <Modifiers<Declaration>> => <>.into(),
    <TermId> => <>.into(),
};

pub TopLevel: TopLevel = {
    <Modifiers<Declaration>*> => TopLevel(<>),
};
