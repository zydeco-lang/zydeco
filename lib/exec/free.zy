alias Kont (R: CType) (A: VType) : CType =
  U (A -> R) -> R
end

def ! mkont (R: CType) : Monad (Kont R) =
  comatch
  | .return A a -> fn k -> ! k a
  | .bind A A' m f -> fn k ->
    ! m { fn a -> ! f a k }
  end
end

alias Free (H: CType -> VType) (A: VType) : CType =
  forall (R: CType) . H R -> Kont R A
end

def ! mfree (H: CType -> VType) : Monad (Free H) =
  comatch
  | .return A a -> fn R h ->
    ! mkont R .return A a
  | .bind A A' m f -> fn R h ->
    ! mkont R .bind A A' { ! m R h } { fn a -> ! f a R h }
  end
end

main
  ! exit 0
end
