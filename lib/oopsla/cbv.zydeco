--| This file implements an interpreter for a simple CBV language.

--| As it is a CBV language, our syntax only contains expressions.
data Expr where
| +Var : String
| +Lam : String * Expr
| +App : Expr * Expr
| +True : Unit
| +False : Unit
| +If : Expr * Expr * Expr
end

--| Environments are implemented as association lists.
data Env where
| +Empty : Unit
| +Cons : String * Value * Env
end

def fix lookup (x : String) (g : Env) : Ret Answer =
  match g
  | +Empty() -> ret +Err()
  | +Cons(y,v,g) ->
    do b <- ! str_eq x y;
    match b
    | +True() -> ret +Ok(v)
    | +False() -> ! lookup x g
    end
  end
end

--| The interpreter works with semantic values, which do not include variables.
--| We use closures in the interpreter to implement semantic thunks.
data Value where
| +True    : Unit
| +False   : Unit
| +Closure : Thk (Value -> Machine)
end

def ! value_to_str (v : Value) : Ret String =
  match v
  | +True() -> ret "true"
  | +False() -> ret "false"
  | +Closure(_) -> ret "<closure>"
  end
end

codata Machine where
| .fun  : Expr * Env -> Machine
| .app  : Value -> Machine
| .if   : Expr * Expr * Env -> Machine
| .bind : Ret Answer
end

--| The "final answer" of the interpreter is either the final value or an error.
data Answer where
| +Ok  : Value
| +Err : Unit
end

--| The error handler.
def fix error: Machine =
  comatch
  | .fun _ -> ! error
  | .app _ -> ! error
  | .if  _ -> ! error
  | .bind -> ret +Err()
  end
end

--| The abstract machine is a codata type that describes the interpreter state:
--| either descending into an expression or ascending to return a value.
codata Interp where
| .descend : Expr * Env -> Machine
| .ascend  : Value -> Machine
end

--| The mutually recursive functions `descend` and `ascend` are defined as a
--| codata-typed term `interp`.
def fix interp : Interp =
  comatch
  | .descend (expr, env) ->
    match expr
    | +Var(x) ->
      do v <- ! lookup x env;
      match v
      | +Err _ -> ! error
      | +Ok  v -> ! interp .ascend v
      end
    | +True() ->
      ! interp .ascend +True()
    | +False() ->
      ! interp .ascend +False()
    | +Lam(x, expr) ->
      -- creates a host language thunk that runs the function body with an
      -- extended environment
      ! interp .ascend +Closure {
        fn v -> ! interp .descend (expr, +Cons(x, v, env))
      }
    | +App(f, a) ->
      ! interp .descend (f, env) .fun (a, env)
    | +If(c, t, f) ->
      ! interp .descend (c, env) .if (t, f, env)
    end
  | .ascend v ->
    comatch
    | .fun (a, env) ->
      ! interp .descend (a, env) .app v
    | .app f ->
      match f
      | +True  _ -> ! error
      | +False _ -> ! error
      | +Closure fun ->
        -- call the function and follow its continuation
        ! fun v
      end
    | .if (t, f, env) ->
      match v
      | +True  _ -> ! interp .descend (t, env)
      | +False _ -> ! interp .descend (f, env)
      end
    | .bind  -> ret +Ok v
    end
  end
end

-- Examples

def identity: Expr =
  +Lam("x", +Var("x"))
end

def idff : Expr =
  +App(identity, +False())
end

def true_ : Expr =
  +Lam("x", +Lam("y", +Var("x")))
end

def false_ : Expr =
  +Lam("x", +Lam("y", +Var("y")))
end

def if_ : Expr =
  +Lam("c", +Lam("t", +Lam("f", +App(+App(+Var("c"), +Var("t")), +Var("f")))))
end

def w : Expr = +Lam("x", +App(+Var("x"), +Var("x"))) end

def omega : Expr = +App(w, w) end

def if_true : Expr =
  +App(+App(+App(if_, true_), +True()), +False())
end

main
  -- should return +True()
  do x <- ! interp .descend (if_true, +Empty()) .bind;
  match x
  | +Err _ -> ! panic "ERROR"
  | +Ok  v ->
    do s <- ! value_to_str v;
    ! write_line s { ! exit 0 }
  end
end
