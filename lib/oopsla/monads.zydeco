# A bunch of example of monads
# The program prints "Hello, world!" using the io monads and then exits.

# The interface for monads
# alias Monad (M: VType -> CType) : CType =
#   codata
#   | .return : forall (A: VType) .
#     A -> M A
#   | .bind : forall (A: VType) (A': VType) .
#     Thk (M A) -> Thk (A -> M A') -> M A'
#   end
# end

# The Ret monad (mret in the paper)
def ! mo-return : Monad Ret =
  comatch
  | .return A a -> ret a
  | .bind A A' m f ->
    do a <- ! m;
    ! f a
  end
end



# The kontinuation monad
codata Kont (R: CType) (A: VType) where
  | .run : Thunk (A -> R) -> R
end

def ! mo-kont (R: CType) : Monad (Kont R) =
  comatch
  | .return A a -> fn .run k ->
    ! k a
  | .bind A A' m f -> fn .run k ->
    do~ ! m .run; fn a ->
    ! f a .run k
  end
end


# The polymorphic kontinuation monad
codata PolyKont (A : VType) where
  | .bind : forall (R: CType) . Thunk (A -> R) -> R
end

def ! mo-polykont : Monad PolyKont =
  comatch
  | .return A a -> fn .bind R k -> ! k a
  | .bind A A' m f -> fn .bind R k' ->
    ! m .bind R { fn a -> ! f a .bind R k' }
  end
end


# The state monad
codata State (S: VType) (A: VType) where
  | .run : forall (R: CType) .
    S -> Thunk (S -> A -> R) -> R
end

def ! mo-state (S: VType) : Monad (State S) =
  comatch
  | .return A a -> fn .run R s k ->
    ! k s a
  | .bind A A' m f -> fn .run R s k' ->
    ! m .run R s { fn s' a -> ! f a .run R s' k' }
  end
end

codata MonadState (S: VType) (M: VType -> CType) where
  | .get: M S
  | .put: S -> M Unit
end

def ! mo-state-state (S: VType) : MonadState S (State S) =
  comatch
  | .get -> fn .run R s k ->
    ! k s s
  | .put s' -> fn .run R s k ->
    ! k s' ()
  end
end


# The I/O monad
codata IO (A: VType) where
  | .run : Thunk (A -> OS) -> OS
end

def ! mo-io : Monad IO =
  comatch
  | .return A a -> fn .run k ->
    ! k a
  | .bind A A' m f -> fn .run ka' ->
    ! m .run { fn a -> ! f a .run ka' }
  end
end

codata MonadIO (M: VType -> CType) where
  | .read : M String
  | .write : String -> M Unit
end

def ! io : MonadIO IO =
  comatch
  | .read -> fn .run ka ->
    ! read_line ka
  | .write s -> fn .run ku ->
    ! write_line s { ! ku () }
  end
end


main
  do~ ! io .write "Hello, world!" .run; fn _ ->
  ! exit 0
end
