--| Monad transformer implementation for the `ExnK` monad
--|
--| This file works similar to `exnt.zydeco`, except here we're implementing
--| for `ExnK`, which is the church encoded version of the `Exn` monad.
--|
--| Check `exnt.zydeco` for detailed explanation.

alias ExnK (E: VType) (A: VType) : CType =
  forall (R: CType) . Thk (E -> R) -> Thk (A -> R) -> R
end

--| Pass the algebra of `R` along with the type quantifier `R`
alias ExnKT (E: VType) (M: VType -> CType) (A: VType) : CType =
  forall (R: CType) . Thk (Algebra M R) -> Thk (E -> R) -> Thk (A -> R) -> R
end

--| Monad implementation for `ExnK`
def ! mo-exnk (E: VType) : Monad (ExnK E) =
  comatch
  | .return A a -> fn R ke ka ->
    ! ka a
  | .bind A A' m f -> fn R ke ka ->
    ! m R ke { fn a -> ! f a R ke ka }
  end
end

--| Automatically generated implementation of the monad transformer for `ExnKT`
def ! mt-exnk (E: VType) : MonadTrans (ExnKT E) =
  let ! mt' (M: VType -> CType) (mo: Thk (Monad M)) =
    @[debug("generated and applied")]
    monadic fn (E: VType) ->
      @[debug("original")]
      let mo-exnk = mo-exnk in
      comatch
      | .monad -> ! mo-exnk E
      | .lift A m ->
        do a <- ! m; ! mo-exnk E .return A a
      end
    :
      forall (E: VType) . MonadTransInner (ExnK E)
    end M mo E triv
  in
  ! detriv-mt (ExnKT E) mt'
end

--| Manual implementation of the monad transformer for `ExnKT`
def ! mt-exnk-manual (E: VType) : MonadTrans (ExnKT E) = fn M mo ->
  comatch
  | .monad ->
    comatch
    | .return A a -> fn R alg -> fn ke ka -> ! ka a
    | .bind A A' m f -> fn R alg -> fn ke ka' ->
      ! m R alg ke { fn a -> ! f a R alg ke ka' }
    end
  | .lift A m -> fn R alg -> fn ke ka ->
    ! alg A m ka
  end
end

main ! exit 0 end
