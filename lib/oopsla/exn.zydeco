--| Examples of exception monads

codata MonadErr (E: VType) (M: VType -> CType) where
  | .fail : forall (A: VType) . E -> M A
end


--| Ret Either exception monad
codata Exn (E: VType) (A: VType) where
  | .done : Ret (Either E A)
end

def ! mexn (E: VType) : Monad (Exn E) =
  comatch
  | .return A a -> fn .done -> ret +Right(a)
  | .bind A A' m f ->
    do a? <- ! m .done;
    match a?
    | +Left(e) -> fn .done -> ret +Left(e)
    | +Right(a) -> fn .done -> ! f a .done
    end
  end
end


--| Church-encoded exception monad
codata ExnK (E: VType) (A: VType) where
  | .run : forall (R: CType) .
    Thk (E -> R) -> Thk (A -> R) -> R
end

def ! mexnk (E: VType) : Monad (ExnK E) =
  comatch
  | .return A a ->
    fn .run R ke ka ->
    ! ka a
  | .bind A A' m f ->
    fn .run R ke ka ->
    ! m .run R ke
    { fn a -> ! f a .run R ke ka }
  end
end


--| Defunctionalized exception monad
codata ExnDe (E: VType) (A: VType) where
  | .try : forall (E': VType) .
    Thk (E -> ExnDe E' A) -> ExnDe E' A
  | .kont : forall (A': VType) .
    Thk (A -> ExnDe E A') -> ExnDe E A'
  | .done : Ret (Either E A)
end

def fix mexnde (E: VType) : Monad (ExnDe E) =
  comatch
  | .return -> fn A a ->
    comatch
    | .try -> fn E' k -> ! mexnde E' .return A a
    | .kont -> fn A' k -> ! k a
    | .done -> ret +Right(a)
    end
  | .bind -> fn A A' m f ->
    ! m .kont A' f
  end
end

def fix mexnde_err (E: VType) : MonadErr E (ExnDe E) =
  comatch
  | .fail -> fn A e ->
    comatch
    | .try -> fn E' k -> ! k e
    | .kont -> fn A' k -> ! mexnde_err E .fail A' e
    | .done -> ret +Left(e)
    end
  end
end


--| Proof of the violation of the monad laws of
--| the defunctionalized exception monad above
def fix count_kont
  (E: VType) (A: VType) (i: Int)
  (fi: Thk (Int -> ExnDe E A))
: ExnDe E A =
  comatch
  | .try -> fn E' ke ->
    ! count_kont E' A i
    { fn i -> ! fi i .try E' ke }
  | .kont -> fn A' ka ->
    do i' <- ! add i 1;
    ! count_kont E A' i'
    { fn i -> ! fi i .kont A' ka }
  | .done ->
    ! fi i .done
  end
end

alias ExnCounter = ExnDe Unit Int end

def ! bench
  (impl: Thk (Thk (ExnCounter) -> ExnCounter))
: Ret Int =
  do i? <- ! impl {
    ! count_kont Unit Int 0
    { ! mexnde Unit .return Int }
  } .done;
  match i?
  | +Left(e) -> ret -1
  | +Right(i) -> ret i
  end
end

-- LHS and RHS of the associativity law
def ! lhs
  (f: Thk (Int -> ExnDe Unit Int))
  (g: Thk (Int -> ExnDe Unit Int))
  (m: Thk (ExnDe Unit Int))
: ExnDe Unit Int =
  ! mexnde Unit .bind Int Int
  { ! mexnde Unit .bind Int Int m f } g
end

def ! rhs
  (f: Thk (Int -> ExnDe Unit Int))
  (g: Thk (Int -> ExnDe Unit Int))
  (m: Thk (ExnDe Unit Int))
: ExnDe Unit Int =
  ! mexnde Unit .bind Int Int
  m { fn i -> ! mexnde Unit .bind Int Int { ! f i } g }
end

-- Observable violation of the monad laws because the results are different
main
  let ! triv : Int -> ExnDe Unit Int =
    ! mexnde Unit .return Int
  in

  do a <- ! bench { fn i -> ! lhs triv triv i };
  do b <- ! bench { fn i -> ! rhs triv triv i };
  -- syntactic sugar:
  -- do~ M; N ==> M { N }
  do~ ! write_int a;
  do~ ! write_str " != ";
  do~ ! write_int b;
  do~ ! write_str "\n";
  ! exit 0
end
