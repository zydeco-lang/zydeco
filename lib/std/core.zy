module Builtin where
  --| VType and CType
  pub extern def VType end
  pub extern def CType end
  --| Thk and Ret
  pub extern def Thk (B : CType) : VType end
  pub extern def Ret (A : VType) : CType end
  pub alias Thunk = Thk end
  pub alias U = Thk end
  pub alias F = Ret end

  --| primitive base types

  --| we support the constructors externally because
  --| the parsers of their constructors are customized
  --| so the type is registered as a data type but the constructors
  --| are not implemented as internal constructors

  pub extern def Unit : VType end
  pub extern def Int : VType end
  pub extern def Char : VType end
  pub extern def String : VType end
  pub extern def OS : CType end

  --| interface for monads and their algebras
  pub extern alias Monad (M: VType -> CType) : CType =
    codata
    | .return : forall (A: VType) .
      A -> M A
    | .bind : forall (A: VType) (A': VType) .
      Thk (M A) -> Thk (A -> M A') -> M A'
    end
  end
  pub extern alias Algebra (M: VType -> CType) (R: CType) : CType =
    forall (A: VType) . Thk (M A) -> Thk (A -> R) -> R
  end
end


module Monad where
  --| interface for monad transformers
  pub alias MonadTrans (T: (VType -> CType) -> VType -> CType) : CType =
    forall (M: VType -> CType) . Thk (Monad M) -> codata
    | .monad : Monad (T M)
    | .lift  : forall (A: VType) . Thk (M A) -> T M A
    end
  end
  
  --| the trivial algebra (structure)
  pub def ! triv : Top = comatch end end

  --| interface for monad, lifted
  pub alias Monad' (M: VType -> CType) : CType =
    codata
    | .return : forall (A: VType) . Thk Top ->
      A -> M A
    | .bind : forall (A: VType) . Thk Top -> (forall (A': VType) . Thk Top ->
      Thk (M A) -> Thk (A -> M A') -> M A')
    end
  end

  --| remove the need of trivial algebra for generated monads
  pub def ! detriv-mo (M: VType -> CType) (mo: Thk (Monad' M)) : Monad M =
    comatch
    | .return A -> ! mo .return A triv
    | .bind A A' -> ! mo .bind A triv A' triv
    end
  end

  --| interface for monad transformers, used annotating terms inside the monadic block
  pub alias MonadTransInner (T_M: VType -> CType): CType =
    codata
    | .monad : Monad T_M
    | .lift  : forall (A: VType) . Thk (Ret A) -> T_M A
    end
  end

  --| interface for monad transformers, lifted
  pub alias MonadTrans' (T: (VType -> CType) -> VType -> CType) : CType =
    forall (M: VType -> CType) . Thk (Monad M) -> codata
    | .monad : Monad' (T M)
    | .lift  : forall (A: VType) . Thk Top -> Thk (M A) -> T M A
    end
  end

  --| remove the need of trivial algebra for generated monad transformers
  pub def ! detriv-mt (T: (VType -> CType) -> VType -> CType) (mt: Thk (MonadTrans' T)) : MonadTrans T =
    fn (M: VType -> CType) (mo: Thk (Monad M)) -> comatch
    | .monad -> ! detriv-mo (T M) { ! mt M mo .monad }
    | .lift A -> ! mt M mo .lift A triv
    end
  end
end


module Core where
  pub alias Empty : VType = data end end
  pub alias Top : CType = codata end end

  pub alias Option (A : VType) : VType =
    data
    | +None : Unit
    | +Some : A
    end
  end

  pub alias Either (E : VType) (A : VType) : VType =
    data
    | +Left : E
    | +Right : A
    end
  end

  pub alias Pair (A : VType) (A' : VType) : VType =
    data
    | +Cons : A * A'
    end
  end

  pub alias Bool : VType =
    data
    | +True : Unit
    | +False : Unit
    end
  end

  pub data Nat where
    | +Z : Unit
    | +S : Nat
  end

  pub data List (A : VType) where
    | +Nil : Unit
    | +Cons : A * List A
  end
end


module String where
  pub extern def str_length : Thunk(String -> Ret Int) end
  pub extern def str_append : Thunk(String -> String -> Ret String) end
  pub extern def str_eq : Thunk(String -> String -> Ret Bool) end
  pub extern def str_index : Thunk(String -> Int -> Ret Char) end
end


module OS where
  pub extern def write_str : Thunk(String -> Thunk(OS) -> OS) end
  pub extern def read_line : Thunk(Thunk(String -> OS) -> OS) end
  pub extern def read_line_as_int : Thunk(Thunk(Option Int -> OS) -> OS) end
  pub extern def random_int : Thunk(Thunk(Int -> OS) -> OS) end
  pub extern def exit : Thunk(Int -> OS) end

  pub def write_line : Thunk(String -> Thunk(OS) -> OS) = {
    fn (s: String) (k: Thunk(OS)) ->
      do s <- ! str_append s "\n";
      ! write_str s k
  } end

  pub def panic : Thunk(String -> OS) = {
    fn (msg: String) ->
      do msg <- ! str_append "Program panicked with message: " msg;
      ! write_line msg { ! exit 1 }
  } end
end
