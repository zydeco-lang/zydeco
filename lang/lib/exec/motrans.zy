// Monad transformers
// Two flavors of exception monad transformers are presented,
// one for the monad that uses `Ret` in its type signature,
// and the other uses CPS (`Kont`).

alias Exn (E: VType) (A: VType) : CType =
  Ret (Either E A)
end

def ! mo-exn (E: VType) : Monad (Exn E) =
  comatch
  | .return A a ->
    ret +Right(a)
  | .bind A A' m f ->
    do a? <- ! m;
    match a?
    | +Left(e) -> ret +Left(e)
    | +Right(a) -> ! f a
    end
  end
end

// Change `Ret` in Exn to `M`
alias ExnT (E: VType) (M: VType -> CType) (A: VType) : CType =
  M (Either E A)
end

def ! mo-exnt (E: VType) (M: VType -> CType)
  (mo: Thunk (Monad M))
: Monad (ExnT E M) =
  // correct anwser:
  //
  // comatch
  // | .return A a ->
  //   ! mo .return (Either E A) +Right(a)
  // | .bind A A' m f ->
  //   do~ ! mo .bind (Either E A) (Either E A') { ! m }; fn a? ->
  //   match a?
  //   | +Left(e) -> ! mo .return (Either E A') +Left(e)
  //   | +Right(a) -> ! f a
  //   end
  // end

  with mo
  begin
    // we need to manually inline mo-exn for now
    (comatch
    | .return A a ->
      ret +Right(a)
    | .bind A A' m f ->
      do a? <- ! m;
      match a?
      | +Left(e) -> ret +Left(e)
      | +Right(a) -> ! f a
      end
    end : Monad (Exn E))
  end
end

def ! mt-exnt (E: VType) : MonadTrans (ExnT E) =
  comatch
  | .monad M mo -> ! mo-exnt E M mo
  | .lift M A mo m ->
    // do~ ! mo .bind A (Either E A) m; fn a ->
    // ! mo .return (Either E A) +Right(a)
    with mo
      import m : Thunk (Ret A) = m
      import mo-exnt-return : Thunk (forall (A: VType) . A -> Exn E A) = { ! mo-exnt E M mo .return }
    begin
      do a <- ! m;
      ! mo-exnt-return A a
    end
  end
end

// Add the algebra for the output type of the continuation $R$
alias ExnK (E: VType) (A: VType) : CType =
  forall (R: CType) . Thunk (E -> R) -> Thunk (A -> R) -> R
end

def ! mo-exnk (E: VType) : Monad (ExnK E) =
  comatch
  | .return A a ->
    fn R ke ka ->
    ! ka a
  | .bind A A' m f ->
    fn R ke ka ->
    do~ ! m R ke; fn a ->
    ! f a R ke ka
  end
end

alias ExnKT (E: VType) (M: VType -> CType) (A: VType) : CType =
  forall (R: CType) . Thunk (Algebra M R) -> Thunk (E -> R) -> Thunk (A -> R) -> R
end

def ! mo-exnkt (E: VType) (M: VType -> CType)
  (mo: Thunk (Monad M))
: Monad (ExnKT E M) =
  comatch
  | .return A a ->
    fn R alg ke ka ->
    ! ka a
  | .bind A A' m f ->
    fn R alg ke ka' ->
    do~ ! m R alg ke; fn a ->
    ! f a R alg ke ka'
  end
end

def ! mt-exnkt (E: VType) : MonadTrans (ExnKT E) =
  comatch
  | .monad M mo -> ! mo-exnkt E M mo
  | .lift M A mo m -> fn R alg ke ka ->
    with mo with alg
      import m : Thunk (Ret A) = m
      import ka : Thunk (A -> R) = ka
    begin
      do a <- ! m;
      ! ka a
    end
  end
end

// // State Monad implementations...

// codata StateK (S: VType) (A: VType) where
//   | .run : forall (R: CType) .
//     S -> Thunk (A -> S -> R) -> R
// end

// def ! mstatek (S: VType) : Monad (StateK S) =
//   comatch
//   | .return A a ->
//     fn .run R s k ->
//     ! k a s
//   | .bind A A' m f ->
//     fn .run R s k ->
//     ! m .run R s
//     { fn a s' -> ! f a .run R s' k }
//   end
// end

// codata MonadState (S: VType) (M: VType -> CType) where
//   | .get : M S
//   | .put : S -> M Unit
// end

// def ! rec mstate_statek (S: VType) : MonadState S (StateK S) =
//   comatch
//   | .get ->
//     fn .run R s k ->
//     ! k s s
//   | .put s' ->
//     fn .run R s k ->
//     ! k () s'
//   end
// end

main
  let e = {
    let ! add_exn (a: Int) (b: Int) : ExnK String Int =
      do c <- ! add a b;
      ! mo-exnk String .return Int c
    in
    with { ! mo-exnk String }
      // need inlining
      import add_ : Thunk (Int -> Int -> Ret Int) = (add_exn : Thunk (Int -> Int -> ExnK String Int))
    begin
      do x <- ! add_ 1 -1;
      do x <- ret x;
      ret x
    end
  } in
  ! e OS { fn e -> ! panic e } { fn a -> ! exit a }
  // ! exit 0
end

