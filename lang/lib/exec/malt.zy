codata MonadErr (M: VType -> CType) where
  | .fail : forall (A: VType) . M A
end

// a maybe monad with the carrier of OS
codata OptOS (A: VType) where
  | .run : U (A -> OS) -> U OS -> OS
end

def fn monad-optos : Monad OptOS =
  comatch
  | .return A a ->
    fn .run ka kn -> ! ka a
  | .bind A A' m f ->
    fn .run ka kn -> ! m .run { fn a -> ! f a .run ka kn } kn
  end
end

def fn monad-err-optos : MonadErr OptOS =
  comatch
  | .fail A ->
    fn .run ka kn -> ! kn
  end
end

def fn alg-optos : Algebra OptOS OS =
  comatch
  | .bindA A m f ->
    ! m .run
      { fn a -> ! f a }
      { ! panic "error: expected something, found nothing" }
  end
end

// prelude ends here

codata MonadAlt (M: VType -> CType) where
  | .alt : forall (A: VType) . U (M A) -> U (M A) -> M A
end

def fn monad-alt-optos : MonadAlt OptOS =
  comatch
  | .alt A m1 m2 ->
    // if m1 fails, run m2
    fn .run ka kn -> ! m1 .run ka { ! m2 .run ka kn }
  end
end

main
  // the user can pick any monad and algebra implementation;
  // the type checker will tell us which is which
  with monad-optos with alg-optos
    // we can import (translate) values from the outside world
    import raise : _ = { ! monad-err-optos .fail (Int) }
    import alt : _ = { ! monad-alt-optos .alt (Int) }
  begin
    // we see two optos'es and we want to run them one by one,
    // and see if any succeeds
    do x <- ! alt { ! raise } { ret 0 };
    // apparently, x is 0 here
    ! exit x
  end
end
