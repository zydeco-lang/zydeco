codata OptionT (M : VType -> CType) (A : VType) where
  | .trans: M (Option A)
end

alias Option' (A : VType) : CType = OptionT (fn (X: VType) -> Ret X) A end

main
  let o : Thunk (Option' Int) = {
    comatch .trans ->
      ret +Some(1)
    end
  } in
  ! exit 0
end
