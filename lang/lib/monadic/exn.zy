// The example itself

def ! eg-poly
  (M: VType -> CType)
  (mo: U (Monad M))
  (alg: U (Algebra M OS))
: OS =
  use mo begin
    do s <- ret "Hello, World!";
    let OS' = Alg OS alg in
    let ! write_line' (s : String) (k : U OS') : OS' =
      embed alg begin
        ! write_line s k
      end
    in
    let ! exit' (n : Int) : OS' =
      embed alg begin
        ! exit n
      end
    in
    ! write_line' s { ! exit' 0 }
  end
end

def ! eg-exn : OS =
  ! eg-poly (Exn String) { ! mo-exn String } alg-exn-str-os
end

def ! eg-optk : OS =
  ! eg-poly OptK mo-optk alg-optk-os
end

// Prelude...

alias Exn (E: VType) (A: VType) : CType =
  Ret (Either E A)
end

// Monad impl. for `Exn E`

def ! mo-exn (E: VType) : Monad (Exn E) =
  comatch
  | .return A a ->
    ret +Right(a)
  | .bind A A' m f ->
    do a? <- ! m;
    match a?
    | +Left(e) -> ret +Left(e)
    | +Right(a) -> ! f a
    end
  end
end

// MonadError

def ! raise (E: VType) (e: E) (A: VType) : Exn E A =
  ret +Left(e)
end

// a specific Algebra of `Exn String` on `OS`

def ! alg-exn-str-os : Algebra (Exn String) OS =
  comatch .bindA A m f ->
    do a? <- ! m;
    match a?
    | +Left(e) -> ! write_line e { ! exit 1 }
    | +Right(a) -> ! f a
    end
  end
end

// Similarly, `OptK` for CPS option

alias OptK (A: VType): CType =
  forall (R: CType) . Thunk R -> Thunk (A -> R) -> R
end

def ! mo-optk : Monad OptK =
  comatch
  | .return A a -> fn R k ka -> ! ka a
  | .bind A A' m f -> fn R k ka ->
    ! m R k { fn a -> ! f a R k ka }
  end
end

def ! alg-optk-os : Algebra OptK OS =
  comatch .bindA A m f ->
    ! m OS { ! exit 1 } f
  end
end
