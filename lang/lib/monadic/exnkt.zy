alias ExnK (E: VType) (A: VType) : CType =
  forall (R: CType) . Thk (E -> R) -> Thk (A -> R) -> R
end

// Change `Ret` in Exn to `M`
alias ExnKT (E: VType) (M: VType -> CType) (A: VType) : CType =
  forall (R: CType) . Thk (Algebra M R) -> Thk (E -> R) -> Thk (A -> R) -> R
end

def ! mo-exnkt (E: VType) (M: VType -> CType)
  (mo: Thk (Monad M))
: Monad (ExnKT E M) =
  // // correct anwser:
  // //
  // // comatch
  // // | .return A a ->
  // //   ! mo .return (Either E A) +Right(a)
  // // | .bind A A' m f ->
  // //   do~ ! mo .bind (Either E A) (Either E A') { ! m }; fn a? ->
  // //   match a?
  // //   | +Left(e) -> ! mo .return (Either E A') +Left(e)
  // //   | +Right(a) -> ! f a
  // //   end
  // // end

  // monadic
  //   // inlining `! mo-exn E`
  //   (comatch
  //   | .return A a ->
  //     ret +Right(a)
  //   | .bind A A' m f ->
  //     do a? <- ! m;
  //     match a?
  //     | +Left(e) -> ret +Left(e)
  //     | +Right(a) -> ! f a
  //     end
  //   end : Monad (Exn E))
  // end M mo
end




// alias MonadTrans' (T: (VType -> CType) -> VType -> CType) (M: VType -> CType) : CType =
//   codata
//   | .monad : Monad (T M)
//   | .lift : forall (A: VType) . Thk (M A) -> T M A
//   end
// end

// def ! mt-exnt (E: VType) (M: VType -> CType) (mo: Thk (Monad M)) : MonadTrans' (ExnT E) M =
//   use mo monadic
//     let ! mo-exn : Monad (Exn E) = 
//       // inlining `! mo-exn E`
//       comatch
//       | .return A a ->
//         ret +Right(a)
//       | .bind A A' m f ->
//         do a? <- ! m;
//         match a?
//         | +Left(e) -> ret +Left(e)
//         | +Right(a) -> ! f a
//         end
//       end
//     in
//     let ! mt-exnt : MonadTrans' (ExnT E) Ret = 
//       comatch
//       | .monad -> ! mo-exn
//       | .lift A m ->
//         do a <- ! m;
//         ! mo-exn .return A a
//       end
//     in
//     ! mt-exnt
//   end
// end






main ! exit 0 end
