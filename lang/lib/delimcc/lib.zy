alias Kont (R: CType) (A: VType) : CType = Thk (A -> R) -> R end

def ! mkont (R: CType) : Monad (Kont R) =
  comatch
  | .return A a -> fn k -> ! k a
  | .bind A A' m f -> fn k -> ! m { fn a -> ! f a k }
  end
end

def ! mret : Monad Ret =
  comatch
  | .return A a -> ret a
  | .bind A A' m f -> do x <- ! m; ! f x
  end
end

// reset and shift

def ! reset
  (M: VType -> CType) (mo: Thk (Monad M))
  (A: VType) (e: Thk (Kont (M A) A))
: M A =
  ! e { fn x -> ! mo .return A x }
end

def ! shift
  (M: VType -> CType) (mo: Thk (Monad M))
  (A: VType) (A': VType)
  (hk: Thk (Thk (A -> M A') -> Kont (M A') A'))
: Kont (M A') A =
  fn ka' -> ! hk ka' { fn x' -> ! mo .return A' x' }
end

// try catch and throw

def ! try
  (M: VType -> CType) (mo: Thk (Monad M))
  (A: VType) (E: VType)
  (t: Thk (Kont (M A) E))
  (h: Thk (E -> M A))
: M A =
  ! mo .bind _ _ {
    ! reset M mo (Thk (Kont (M A) E)) {
      fn _ -> ! mo .return _ t
    }
  } { fn t -> ! t h }
end

def ! throw
  (M: VType -> CType) (mo: Thk (Monad M))
  (A: VType) (E: VType) (e: E)
: Kont (M E) A =
  ! shift M mo A E { fn _ ke -> ! ke e }
end
