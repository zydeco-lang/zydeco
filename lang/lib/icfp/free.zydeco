// The Free monad

// // The interface for monads
// codata Monad (M: VType -> CType) where
//   | .return : forall (A: VType) .
//     A -> M A
//   | .bind : forall (A: VType) (A': VType) .
//     Thunk (M A) -> Thunk (A -> M A') -> M A'
// end

data Empty where end
codata Kont (R: CType) (A: VType) where
  | .run : Thunk (A -> R) -> R
end


// Types of handlers
alias KRead (R: CType) : VType =
  Thunk (Unit -> Kont R String)
end

alias KWrite (R: CType) : VType =
  Thunk (String -> Kont R Unit)
end

alias KFail (E: VType) (R: CType) : VType =
  Thunk (E -> Kont R Empty)
end


// A specific free monad with three handlers
codata Free (A: VType) where
  | .run : forall (R: CType) .
    KRead R -> KWrite R -> KFail String R -> Kont R A
end


def ! mfree : Monad Free =
  comatch
  | .return A a ->
    fn .run R read write fail ->
    fn .run k -> ! k a
  | .bind A A' m f ->
    fn .run R read write fail ->
    fn .run k' ->
    ! m .run R read write fail
    .run {
      fn a ->
      ! f a .run R read write fail
      .run k'
    }
  end
end


// The interface for using Free
def ! read ((): Unit) : Free String =
  fn .run R read write fail -> ! read ()
end

def ! write (s: String) : Free Unit =
  fn .run R read write fail -> ! write s
end

def ! fail (s: String) : Free Empty =
  fn .run R read write fail -> ! fail s
end

def ! read_os ((): Unit) : Kont OS String =
  fn .run k -> ! read_line k
end

def ! write_os (s: String) : Kont OS Unit =
  fn .run k -> ! write_line s { ! k () }
end

def ! fail_os (s: String) : Kont OS Empty =
  fn .run k -> ! panic s
end


main
  let ! prog : Free Unit =
    do~ ! mfree .bind String Unit { ! read () }; fn s ->
    ! write s
  in
  ! prog .run OS read_os write_os fail_os .run { fn () -> ! exit 0 }
end
