-- Monad transformers
-- Two flavors of exception monad transformers are presented,
-- one for the monad that uses `Ret` in its type signature,
-- and the other uses CPS (`Kont`).

-- The interface for monads
-- codata Monad (M: VType -> CType) where
--   | .return : forall (A: VType) .
--     A -> M A
--   | .bind : forall (A: VType) (A': VType) .
--     Thunk (M A) -> Thunk (A -> M A') -> M A'
-- end

-- The interface for the algebra
-- codata Algebra (M: VType -> CType) (R: CType) where
--   | .bindA : forall (A: VType) .
--     Thunk (M A) -> Thunk (A -> R) -> R
-- end

alias MonadS : Kind = sigma (M: VType -> CType) . Monad M end
alias AlgebraS (M: VType -> CType) : Kind = sigma (R: CType) . Algebra M R end

-- The interface for the monad transformer
-- codata MonadTrans (T: MonadS -> VType -> CType) where
--   | .monad : forall (Mo: MonadS) . Monad (T Mo)
--   | .lift : forall ((M, mo): MonadS) (A: VType) .
--     Thunk (M A) -> T (M, mo) A
-- end


-- Change `Ret` in Exn to `M`
codata ExnT (E: VType) ((M, mo): MonadS) (A: VType) where
  | .done : M (Either E A)
end

def ! mtexn (E: VType) : MonadTrans (ExnT E) =
  comatch
  | .monad (M, mo) ->
    comatch
    | .return A a -> fn .done ->
      ! mo .return @(Either E A) +Right(a)
    | .bind A A' m f -> fn .done ->
      ! mo .bind @(Either E A) @(Either E A') { ! m .done }
      { fn a? ->
          match a?
          | +Left(e) -> ! mo .return @(Either E A') +Left(e)
          | +Right(a) -> ! f a .done
          end }
    end
  | .lift (M, mo) A m -> fn .done ->
    ! mo .bind @(A) @(Either E A) m
    { fn a ->
      ! mo .return @(Either E A) +Right(a) }
  end
end


-- Add the algebra for the output type of the continuation $R$
codata ExnKT (E: VType)
  ((M, mo): MonadS) (A: VType)
where
  | .run : forall ((R, alg): AlgebraS M) -> Thunk (E -> R) -> Thunk (A -> R) -> R
end

def ! mtexnk (E: VType) : MonadTrans (ExnKT E) =
  comatch
  | .monad (M, mo) ->
    comatch
    | .return A a -> fn .run (R, alg) ke ka ->
      ! ka a
    | .bind A A' m f -> fn .run (R, alg) ke ka' ->
      do ! m .run ke; fn a ->
      ! f a .run ke ka'
    end
  | .lift (M, mo) A m -> fn .run (R, alg) ke ka ->
    ! alg .bindA @(A) m ka
  end
end


main
  ! exit 0
end
