module Builtin where
  /// VType and CType
  pub extern def VType end
  pub extern def CType end
  /// Thk and Ret
  pub extern def Thk (B : CType) : VType end
  pub extern def Ret (A : VType) : CType end
  pub alias Thunk = Thk end
  pub alias U = Thk end
  pub alias F = Ret end

  /// primitive base types

  /// we support the constructors externally because
  /// the parsers of their constructors are customized
  /// so the type is registered as a data type but the constructors
  /// are not implemented as internal constructors

  pub extern def Unit : VType end
  pub extern def Int : VType end
  pub extern def Char : VType end
  pub extern def String : VType end
  pub extern def OS : CType end

  /// interface for monads and their algebras
  pub extern alias Monad (M: VType -> CType) : CType =
    codata
    | .return : forall (A: VType) .
      A -> M A
    | .bind : forall (A: VType) (A': VType) .
      Thk (M A) -> Thk (A -> M A') -> M A'
    end
  end
  pub extern alias Algebra (M: VType -> CType) (R: CType) : CType =
    forall (A: VType) . Thk (M A) -> Thk (A -> R) -> R
  end

  /// interface for monad transformers
  pub alias MonadTrans (T: (VType -> CType) -> VType -> CType) : CType =
    forall (M: VType -> CType) . Thk (Monad M) -> codata
    | .monad : Monad (T M)
    | .lift  : forall (A: VType) . Thk (M A) -> T M A
    end
  end
end

module Core where
  pub alias Empty : VType = data end end
  pub alias Top : CType = codata end end

  pub data Option (A : VType) where
    | +None : Unit
    | +Some : A
  end

  pub data Either (E : VType) (A : VType) where
    | +Left : E
    | +Right : A
  end

  pub data Pair (A : VType) (A' : VType) where
    | +Cons : A * A'
  end

  pub data Bool where
    | +True : Unit
    | +False : Unit
  end

  pub data Nat where
    | +Z : Unit
    | +S : Nat
  end

  pub data List (A : VType) where
    | +Nil : Unit
    | +Cons : A * List A
  end
end

module String where
  pub extern def str_length : Thunk(String -> Ret Int) end
  pub extern def str_append : Thunk(String -> String -> Ret String) end
  pub extern def str_eq : Thunk(String -> String -> Ret Bool) end
  pub extern def str_index : Thunk(String -> Int -> Ret Char) end
end

module OS where
  pub extern def write_str : Thunk(String -> Thunk(OS) -> OS) end
  pub extern def read_line : Thunk(Thunk(String -> OS) -> OS) end
  pub extern def read_line_as_int : Thunk(Thunk(Option Int -> OS) -> OS) end
  pub extern def random_int : Thunk(Thunk(Int -> OS) -> OS) end
  pub extern def exit : Thunk(Int -> OS) end

  pub def write_line : Thunk(String -> Thunk(OS) -> OS) = {
    fn (s: String) (k: Thunk(OS)) ->
      do s <- ! str_append s "\n";
      ! write_str s k
  } end

  pub def panic : Thunk(String -> OS) = {
    fn (msg: String) ->
      do msg <- ! str_append "Program panicked with message: " msg;
      ! write_line msg { ! exit 1 }
  } end
end
