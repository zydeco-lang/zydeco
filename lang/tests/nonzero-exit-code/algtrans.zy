codata Monad (M: VType -> CType) where
  | .return : forall (A: VType) . A -> M A
  | .bind : forall (A: VType) (A': VType) . U (M A) -> U (A -> M A') -> M A'
end

/* Exception implementations... */

codata ExnK (E: VType) (A: VType) where
  | .run : forall (R: CType) .
    Thunk (E -> R) -> Thunk (A -> R) -> R
end

def fn mexnk (E: VType) : Monad (ExnK E) =
  comatch
  | .return A a ->
    fn .run R ke ka ->
    ! ka a
  | .bind A A' m f ->
    fn .run R ke ka ->
    ! m .run @(R) ke
    { fn a -> ! f a .run @(R) ke ka }
  end
end

codata MonadExn (E: VType) (M: VType -> CType) where
  | .throw : forall (A: VType) . E -> M A
  | .catch : forall (A: VType) . U (M A) -> U (E -> M A) -> M A
end

def fn mexn_exnk (E: VType) : MonadExn E (ExnK E) =
  comatch
  | .throw A e ->
    fn .run R ke ka ->
    ! ke e
  | .catch A m f ->
    fn .run R ke ka ->
    ! m .run @(R) { fn e -> ! f e .run @(R) ke ka } ka
  end
end

/* State implementations... */

codata StateK (S: VType) (A: VType) where
  | .run : forall (R: CType) .
    S -> Thunk (A -> S -> R) -> R
end

def fn mstatek (S: VType) : Monad (StateK S) =
  comatch
  | .return A a ->
    fn .run R s k ->
    ! k a s
  | .bind A A' m f ->
    fn .run R s k ->
    ! m .run @(R) s
    { fn a s' -> ! f a .run @(R) s' k }
  end
end

codata MonadState (S: VType) (M: VType -> CType) where
  | .get : M S
  | .put : S -> M Unit
end

def rec fn mstate_statek (S: VType) : MonadState S (StateK S) =
  comatch
  | .get ->
    fn .run R s k ->
    ! k s s
  | .put s' ->
    fn .run R s k ->
    ! k +Unit() s'
  end
end

// Now use `mstate` somehow...

// def rec fn while (S: VType) (cond: StateK S Bool) (body: StateK S Unit) : StateK S Unit =
//   // TODO: use mstatek here
//   do b <- ! cond;
//   ! if @(StateK S Unit) b {
//     // TODO: use mstate_statek here
//     do _ <- ! body;
//     ! while cond body
//   } {
//     // TODO: use mstate_statek here
//     ret +Unit()
//   }
// end

main
  ! exit 0
end

