data Seal (X : VType) (A : VType) where
| +Seal(Thunk(A -> Ret X), Thunk(X -> Ret A))
end

def nat : exists (X : VType) . Seal X Int = pack(
  Int, +Seal(
    { ! id @(Int) },
    { ! id @(Int) },
  )
) end

main
  match nat
  | pack(Nat, seal) ->
    match seal
    | +Seal(of, to) ->
      do n <- ! of 0;
      do i <- ! to n;
      ! exit i
    end
  end
end
