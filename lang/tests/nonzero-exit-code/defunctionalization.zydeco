# Don't defunctionalize the kontinuation, objectify the computation!

# Let's consider a simple example of a recursive function, summing up
# the numbers in a list.

codata Summer where
  | .done : Ret Int # The equivalent of CALLERS_KONT
  | .addN : Int -> Summer
end

codata Summer' where
  | .add : Int -> Ret Int
end

def rec fn sumBad (xs : List Int) : Ret(Int) =
  match xs
  | +Nil() -> ret 0
  | +Cons(x, xs) ->
    do n <- ! sumBad xs;
    ! add n x
  end
end

# This is a bad algorithm because it uses stack space linear in the
# size of the input list. Why is that? each time we have a cons, we do
# a *bind*, which pushes a kontinuation onto the stack. So if we have a list

# +Cons(5, +Cons(13, Nil))

# when we get to the recursive call, the stack looks like:

# (n <- -. ! add n 13) :: (n <- -. ! add n 5) :: CALLERS_KONT

# We can make this recursive stack structure explicit in the program
# by changing the return type from Ret(Int) to a new special codata
# type Summer (see above)

# and changing the implementation as follows:

def rec fn retSummer (n : Int) : Summer =
  comatch
  | .done -> ret n
  | .addN -> fn x ->
    do n' <- ! add n x;
    ! retSummer n'
  end
end

def rec fn sumOk (xs : List Int) : Summer =
  match xs
  | +Nil()       -> ! retSummer 0
  | +Cons(x, xs) -> ! sumOk xs .addN x
  end
end

# Now instead of pushing a "real" continuation we add a "method"
# .addN(n) with the captured variables of the continuation as
# arguments (in this case, just n).

# So when we get to empty, the stack looks like:

# .addN 13 .addN 5 .done

# Since each of these is no longer a *real* continuation, we can't
# just use `ret` to return, so we need to implement a new function
# "retSummer" that interprets each of these "abstract" continuations
# as the operation the original continuation performed.

# But note that this algorithm is *just* as bad as before, in that it
# still uses linear stack space, we've just changed from continuations
# to methods.

# To get a better algorithm we need to make a key insight:

# when we run ! retSummer x .addN y .addN z

# we will evaluate to ! retSummer .addN (x + y) .addN (z)
# and then            ! retSummer .addN ((x + y) + z)

# which is clearly equivalent to ! retSummer .addN (x + (y + z))
# by the associativity of addition.

# but this is what we would have evaluated to if we had run
# ! retSummer x .addN (y + z)

# So when we pushed .addN (y) on the stack, we could have instead added
# it to `z` and not increased the size of the stack(!)


def rec fn sumBetter (xs : List Int) : Summer =
  match xs
  | +Nil()     -> ! retSummer 0
  | +Cons(x, xs) ->
    comatch
    | .done -> ! sumBetter xs .addN x .done
    | .addN -> fn y ->
      do xPlusy <- ! add x y;
      ! sumBetter xs .addN xPlusy
    end
  end
end

# This is better in that it uses *constant* space to implement the
# same algorithm, but we can make a couple of more improvements:

# 1. We are branching on what the stack is every time we have a
#    Cons. but what if we instead ensured that there was always an
#    .add n on the stack so we wouldn't have to guess? We can do this
#    by changing our codata type to only have one case (see above, Summer'):

# This no longer needs to be recursive because we know there will only
# be at most one add, i.e., because we use constant stack space!
# 
# We can implement the .done method from before by pushing .add(0)
# (using that it is the additive unit).

def rec fn sumBest (xs : List Int) : Summer' =
  match xs
  | +Nil() -> comatch
    | .add -> fn n -> ret n
    end
  | +Cons(x, xs) -> comatch
    | .add -> fn n ->
      do n' <- ! add x n;
      ! sumBest xs .add n'
    end
  end
end

def fn sum (xs : List Int) : Ret Int =
  ! sumBest xs .add 0
end

main
  do x <- ! sum (+Cons(5, +Cons(13, +Nil())));
  do s <- ! int_to_str x;
    ! write_line s { ! exit 0 }
end
