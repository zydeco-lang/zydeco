# An example that uses forall and type aliases to prove that
# `Ret' A` and the `Ret A` primitive are isomorphic to each other.

alias Ret' (A : VType) = forall (R : CType) . Thunk(A -> R) -> R end

def f : Thunk(forall (A : VType) . Thunk(Ret' A) -> Ret A) = {
  fn A rr -> (
    ! rr @(Ret A) { fn a -> ret a }
  )
} end

def g : Thunk(forall (A : VType) . Thunk(Ret A) -> Ret' A) = {
  fn A r -> (
    fn R ar -> (
      do a <- ! r;
      ! ar a
    )
  )
} end

def id : Thunk(forall (A : VType) . Thunk(Ret A) -> Ret A) = {
  fn A r -> (
    ! f @(A) { ! g @(A) r }
  )
} end

def id' : Thunk(forall (A : VType) . Thunk(Ret' A) -> Ret' A) = {
  fn A rr -> (
    ! g @(A) { ! f @(A) rr }
  )
} end

main
  let n = 0 in
  do n <- ! id @(Int) { ret n };
  ! id' @(Int) { fn R ar -> ! ar n } @(OS) exit
end
