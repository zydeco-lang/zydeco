// A monad structure that supports fail and print as well
codata MonadErrPrint (M: VType -> CType) where
  | .return : forall (A: VType) . A -> M A
  | .bind   : forall (A: VType) (A': VType) . U (M A) -> U (A -> M A') -> M A'
  | .fail   : forall (A: VType) . Exception -> M A
  | .print  : String -> M Unit
end

codata Algebra (M: VType -> CType) (B: CType) where
  | .bindA : forall (A: VType) . U (M A) -> U (A -> B) -> B
end

data Exception where
  | +TypeError()
  | +FreeVariable()
end

// Continuation-based error monad
codata MExnOS (A: VType) where
  | .run : U (A -> OS) -> U (Exception -> OS) -> OS
end

def fn mexn : MonadErrPrint MExnOS =
  comatch
  | .return -> fn A a ->
    comatch
    | .run -> fn ka _ -> ! ka a
    end
  | .bind -> fn A A' m f ->
    comatch
    | .run -> fn ka ke ->
      ! m .run { fn a -> ! f a .run ka ke } { fn e -> ! ke e }
    end
  | .fail -> fn A e ->
    comatch
    | .run -> fn _ ke -> ! ke e
    end
  | .print s ->
    comatch
    | .run -> fn ka _ ->
      ! write_line s { ! ka +Unit() }
    end
  end
end

data EnvT where
  | +Empty()
  | +Extend(String, Value, EnvT)
end

codata EnvO where
  | .lookup: String -> Ret (Option Value)
  | .extend: String -> Value -> EnvO
end

def rec fn envo (env: EnvT) : EnvO =
  comatch
  | .lookup x ->
    match env
    | +Empty() -> ret +None()
    | +Extend(x', v, env') ->
      do is-eq? <- ! str_eq x x';
      match is-eq?
      | +True() -> ret +Some(v)
      | +False() -> ! envo env' .lookup x
      end
    end
  | .extend -> fn x v ->
    ! envo +Extend(x, v, env)
  end
end

data Value where
  | +Bool(Bool)
  | +Thunk(U (Compu))
end

codata Compu where
  | .app: Value -> Compu
  | .bind: MExnOS Value
end

def fn abort (e: Exception) : Compu =
  rec unwind -> comatch
  | .app _ -> ! unwind
  | .bind -> ! mexn .fail @(Value) e
  end
end

def rec fn malg : Algebra MExnOS Compu =
  comatch
  | .bindA -> fn A m f -> // m : U (MExnOS A), f: U (A -> Compu)
    comatch
    | .app a -> // goal: Compu
      ! malg .bindA @(A) m { fn v -> ! f v .app a }
    | .bind -> // goal: MExnOS Value, use ordinary bind
      ! mexn .bind @(A) @(Value) m { fn x -> ! f x .bind }
    end
  end
end

data SValue where
  | +Var(String)
  | +Bool(Bool)
  | +Thunk(SCompu)
end

data SCompu where
  | +Lam(String, SCompu)
  | +App(SCompu, SValue)
  | +Ret(SValue)
  | +Bind(SCompu, String, SCompu)
  | +Force(SValue)
  | +If(SValue, SCompu, SCompu)
end

codata Interp where
  | .value: SValue -> MExnOS Value
  | .compu: SCompu -> Compu
end

def rec fn interp (env: U EnvO) : Interp =
  comatch
  | .value sv ->
    match sv
    | +Var(x) ->
      do x? <- ! env .lookup x;
      match x?
      | +None() -> ! mexn .fail @(Value) +FreeVariable()
      | +Some(v) ->
        ! mexn .return @(Value) v
      end
    | +Bool(b) ->
      ! mexn .return @(Value) +Bool(b)
    | +Thunk(c) ->
      ! mexn .return @(Value) +Thunk({ ! interp env .compu c })
    end
  | .compu sc ->
    match sc
    | +Lam(x, sc) ->
      comatch
      | .app v ->
        ! interp { ! env .extend x v } .compu sc
      | .bind -> ! mexn .fail @(Value) +TypeError()
      end
    | +App(sc, sv) ->
      let mv = { ! interp env .value sv } in
      ! malg .bindA @(Value) mv { fn v -> ! interp env .compu sc .app v }
    | +Ret(sv) ->
      let rec fn unwind (m: U (MExnOS Value)) : Compu =
        comatch
        | .app _ -> ! unwind { ! mexn .fail @(Value) +TypeError() }
        | .bind -> ! m
        end
      in
      ! unwind { ! interp env .value sv }
    | +Bind(sc1, x, sc2) ->
      let mv = { ! interp env .compu sc1 .bind } in
      ! malg .bindA @(Value) mv { fn v ->
        ! interp { ! env .extend x v } .compu sc2
      }
    | +Force(sv) ->
      let mv = { ! interp env .value sv } in
      ! malg .bindA @(Value) mv { fn v ->
        match v
        | +Bool(_) -> ! abort +TypeError()
        | +Thunk(c) -> ! c
        end
      }
    | +If(sv, c1, c2) ->
      let mv = { ! interp env .value sv } in
      ! malg .bindA @(Value) mv { fn v ->
        match v
        | +Bool(b) ->
          match b
          | +True() -> ! interp env .compu c1
          | +False() -> ! interp env .compu c2
          end
        | +Thunk(_) -> ! abort +TypeError()
        end
      }
    end
  end
end

main
  let env : U EnvO = { ! envo +Empty() } in
  let fn report (e: Exception) : OS =
    match e
    | +TypeError() -> ! panic "type error"
    | +FreeVariable() -> ! panic "free variable"
    end
  in
  let fn value-eq (v1: Value) (v2: Value) (k: U OS) : OS =
    let bool-value-panic = { ! panic "wrong bool value" } in
    let thunk-panic = { ! panic "thunks are not comparable" } in
    match v1
    | +Bool(b1) ->
      match v2
      | +Bool(b2) ->
        do eq? <- ! bool_eq b1 b2;
        match eq?
        | +True() -> ! write_line "\\^o^/" k
        | +False() -> ! bool-value-panic
        end
      | +Thunk(_) -> ! thunk-panic
      end
    | +Thunk(_) -> ! thunk-panic
    end
  in
  let fn demo (term: SCompu) (ans: Value) (k: U OS): OS =
    ! interp env .compu term .bind .run {
      fn v -> ! value-eq v ans k
    } report
  in
  // if true then ret true else ret false
  let term1: SCompu = +If(+Bool(+True()), +Ret(+Bool(+True())), +Ret(+Bool(+False()))) in
  let ans1: Value = +Bool(+True()) in
  // (do x <- ret True in \b -> if b then x else false) True
  let term2: SCompu = +App(+Bind(
    +Ret(+Bool(+True())), "x", +Lam("b", +If(+Var("b"), +Ret(+Var("x")), +Ret(+Bool(+False()))))
  ), +Bool(+True())) in
  let ans2: Value = +Bool(+True()) in
  ! demo term1 ans1 {
  ! demo term2 ans2 {
  ! exit 0 }}
end
