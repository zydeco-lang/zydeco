use Structure/ Others/ .. end
use Structure/ Syn/ .. end
use Structure/ .. end
use Utils/ .. end
use Std/ Builtin/ .. end
use Std/ Std/ String/ .. end

pub def rec fn lookup (x : String) (g : Env) : Ret(Answer SemVal) =
  match g
  | +Empty() -> ret +Err()
  | +Cons(y,v,g) ->
    do b <- ! str_eq x y;
    match b
    | +True() -> ret +Ok(v)
    | +False() -> ! lookup x g
    end
  end
end

pub def rec interp: Interpreter =
  comatch
    | .valu(v, g) -> (
      match v
      | +Var(x) -> ! lookup x g
      | +True() -> ret +Ok( +True() )
      | +False() -> ret +Ok( +False() )
      # Here we use the meta-language closures to capture the environment g 
      | +ThunkV(m) -> ret +Ok( +ThunkV({ ! interp .comp(m, g) }))
      end
    )
    | .comp(m, g) -> (
      match m
      | +If(cond, mt, mf) -> (
        match cond
        | +Var(_) -> ! error
        | +True() -> ! interp .comp(mt, g)
        | +False() -> ! interp .comp(mf, g)
        | +ThunkV(_) -> ! error
        end
      )
      | +Force(syn_val) -> (
        do v? <- ! interp .valu(syn_val, g);
        match v?
        | +Ok(v) -> (
          match v
          | +ThunkV(t) -> ! t
          | +True() -> ! error
          | +False() -> ! error
          end
        )
        | +Err() -> ! error
        end
      )
      | +Return(syn_val) -> (
        do v <- ! interp .valu(syn_val, g);
        comatch
          | .bind() -> ret v
          | .app(_) -> ! error
        end
      )
      | +Bind(m, x, k) -> (
        do v? <- ! interp .comp(m, g) .bind();
        match v?
        | +Ok(v) -> ! interp .comp(k, +Cons(x, v, g))
        | +Err() -> ! error
        end
      )
      | +Lam(x, m) -> (
        comatch
          | .app(v) -> (! interp .comp(m, +Cons(x, v, g)))
          | .bind() -> ret +Err()
        end
      )
      | +App(m, v) -> (
        do v? <- ! interp .valu(v, g);
        match v?
        | +Ok(v) -> ! interp .comp(m, g) .app(v)
        | +Err() -> ! error
        end
      )
      end)
    end
end
