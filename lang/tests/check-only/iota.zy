data LList' (A : VType) where
  | +Nil()
  | +Cons(A, U(F(LList' A)))
end

def rec iota : Int -> F(LList' Int) =
  fn (i: Int) ->
    do i+1 <- ! add i 1;
    ret +Cons(i, { ! iota i+1 })
end

def rec fn foldr (ll: U(F(LList' Int))) (f: U(Int -> U OS -> OS)) (b: U OS) : OS =
  do llv <- ! ll;
  match llv
  | +Nil() -> ! b
  | +Cons(a, ll) -> ! f a { ! foldr ll f b }
  end
end

def fn loopy =
  ! foldr
  { ! iota 0 }
  { fn (x: Int) (b: U OS) ->
    do next? <- ! int_lt x 10;
    ! write_int_line x b
  }
  { ! panic "unreachable" }
end

main
  ! loopy
end
