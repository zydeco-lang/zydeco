codata Y (B : CType) where
  | .y : Thunk (Y B) -> B
end

data Self (B : VType) where
  | +Roll(Thunk(Self B -> Ret B))
end

def fix : Thunk (forall (B : CType) . Thunk(Thunk B -> B) -> B) = {
  fn B f ->
  let prim : Thunk (Y B) = { comatch | .y x -> ! f { ! x .y x } end } in
  ! prim .y prim
} end

main
  ! fix @(OS) { fn loop -> ! loop }
end
